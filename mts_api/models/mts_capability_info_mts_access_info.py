# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class MtsCapabilityInfoMtsAccessInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_id=None, access_type=None, metered=None):  # noqa: E501
        """MtsCapabilityInfoMtsAccessInfo - a model defined in OpenAPI

        :param access_id: The access_id of this MtsCapabilityInfoMtsAccessInfo.  # noqa: E501
        :type access_id: int
        :param access_type: The access_type of this MtsCapabilityInfoMtsAccessInfo.  # noqa: E501
        :type access_type: int
        :param metered: The metered of this MtsCapabilityInfoMtsAccessInfo.  # noqa: E501
        :type metered: int
        """
        self.openapi_types = {
            'access_id': int,
            'access_type': int,
            'metered': int
        }

        self.attribute_map = {
            'access_id': 'accessId',
            'access_type': 'accessType',
            'metered': 'metered'
        }

        self._access_id = access_id
        self._access_type = access_type
        self._metered = metered

    @classmethod
    def from_dict(cls, dikt) -> 'MtsCapabilityInfoMtsAccessInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MtsCapabilityInfo_mtsAccessInfo of this MtsCapabilityInfoMtsAccessInfo.  # noqa: E501
        :rtype: MtsCapabilityInfoMtsAccessInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_id(self):
        """Gets the access_id of this MtsCapabilityInfoMtsAccessInfo.

        Unique identifier for the access network connection  # noqa: E501

        :return: The access_id of this MtsCapabilityInfoMtsAccessInfo.
        :rtype: int
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this MtsCapabilityInfoMtsAccessInfo.

        Unique identifier for the access network connection  # noqa: E501

        :param access_id: The access_id of this MtsCapabilityInfoMtsAccessInfo.
        :type access_id: int
        """

        self._access_id = access_id

    @property
    def access_type(self):
        """Gets the access_type of this MtsCapabilityInfoMtsAccessInfo.

        Numeric value (0-255) corresponding to specific type of access network as following: 0 = Unknown 1 = Any IEEE802.11-based WLAN technology 2 = Any 3GPP-based Cellular technology 3 = Any Fixed Access 11 = IEEE802.11 a/b/g WLAN 12 = IEEE 802.11 a/b/g/n WLAN 13 = IEEE 802.11 a/b/g/n/ac WLAN 14 = IEEE 802.11 a/b/g/n/ac/ax WLAN (Wi-Fi 6) 15 = IEEE 802.11 b/g/n WLAN 31 = 3GPP GERAN/UTRA (2G/3G) 32 = 3GPP E-UTRA (4G/LTE) 33 = 3GPP NR (5G)  # noqa: E501

        :return: The access_type of this MtsCapabilityInfoMtsAccessInfo.
        :rtype: int
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this MtsCapabilityInfoMtsAccessInfo.

        Numeric value (0-255) corresponding to specific type of access network as following: 0 = Unknown 1 = Any IEEE802.11-based WLAN technology 2 = Any 3GPP-based Cellular technology 3 = Any Fixed Access 11 = IEEE802.11 a/b/g WLAN 12 = IEEE 802.11 a/b/g/n WLAN 13 = IEEE 802.11 a/b/g/n/ac WLAN 14 = IEEE 802.11 a/b/g/n/ac/ax WLAN (Wi-Fi 6) 15 = IEEE 802.11 b/g/n WLAN 31 = 3GPP GERAN/UTRA (2G/3G) 32 = 3GPP E-UTRA (4G/LTE) 33 = 3GPP NR (5G)  # noqa: E501

        :param access_type: The access_type of this MtsCapabilityInfoMtsAccessInfo.
        :type access_type: int
        """

        self._access_type = access_type

    @property
    def metered(self):
        """Gets the metered of this MtsCapabilityInfoMtsAccessInfo.

        Numeric value (0-255) corresponding to the following: 0: the connection is not metered (see note) 1: the connection is metered 2: unknown   # noqa: E501

        :return: The metered of this MtsCapabilityInfoMtsAccessInfo.
        :rtype: int
        """
        return self._metered

    @metered.setter
    def metered(self, metered):
        """Sets the metered of this MtsCapabilityInfoMtsAccessInfo.

        Numeric value (0-255) corresponding to the following: 0: the connection is not metered (see note) 1: the connection is metered 2: unknown   # noqa: E501

        :param metered: The metered of this MtsCapabilityInfoMtsAccessInfo.
        :type metered: int
        """

        self._metered = metered
