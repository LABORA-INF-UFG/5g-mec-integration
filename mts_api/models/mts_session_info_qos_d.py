# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
import util


class MtsSessionInfoQosD(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_jitter=None, max_latency=None, max_loss=None, min_tpt=None, priority=None):  # noqa: E501
        """MtsSessionInfoQosD - a model defined in OpenAPI

        :param max_jitter: The max_jitter of this MtsSessionInfoQosD.  # noqa: E501
        :type max_jitter: int
        :param max_latency: The max_latency of this MtsSessionInfoQosD.  # noqa: E501
        :type max_latency: int
        :param max_loss: The max_loss of this MtsSessionInfoQosD.  # noqa: E501
        :type max_loss: int
        :param min_tpt: The min_tpt of this MtsSessionInfoQosD.  # noqa: E501
        :type min_tpt: int
        :param priority: The priority of this MtsSessionInfoQosD.  # noqa: E501
        :type priority: int
        """
        self.openapi_types = {
            'max_jitter': int,
            'max_latency': int,
            'max_loss': int,
            'min_tpt': int,
            'priority': int
        }

        self.attribute_map = {
            'max_jitter': 'maxJitter',
            'max_latency': 'maxLatency',
            'max_loss': 'maxLoss',
            'min_tpt': 'minTpt',
            'priority': 'priority'
        }

        self._max_jitter = max_jitter
        self._max_latency = max_latency
        self._max_loss = max_loss
        self._min_tpt = min_tpt
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt) -> 'MtsSessionInfoQosD':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MtsSessionInfo_qosD of this MtsSessionInfoQosD.  # noqa: E501
        :rtype: MtsSessionInfoQosD
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_jitter(self):
        """Gets the max_jitter of this MtsSessionInfoQosD.

        tolerable jitter in [10 nanoseconds]  # noqa: E501

        :return: The max_jitter of this MtsSessionInfoQosD.
        :rtype: int
        """
        return self._max_jitter

    @max_jitter.setter
    def max_jitter(self, max_jitter):
        """Sets the max_jitter of this MtsSessionInfoQosD.

        tolerable jitter in [10 nanoseconds]  # noqa: E501

        :param max_jitter: The max_jitter of this MtsSessionInfoQosD.
        :type max_jitter: int
        """

        self._max_jitter = max_jitter

    @property
    def max_latency(self):
        """Gets the max_latency of this MtsSessionInfoQosD.

        tolerable (one-way) delay in [10 nanoseconds]  # noqa: E501

        :return: The max_latency of this MtsSessionInfoQosD.
        :rtype: int
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency):
        """Sets the max_latency of this MtsSessionInfoQosD.

        tolerable (one-way) delay in [10 nanoseconds]  # noqa: E501

        :param max_latency: The max_latency of this MtsSessionInfoQosD.
        :type max_latency: int
        """

        self._max_latency = max_latency

    @property
    def max_loss(self):
        """Gets the max_loss of this MtsSessionInfoQosD.

        tolerable packet loss rate in [1/10^x]  # noqa: E501

        :return: The max_loss of this MtsSessionInfoQosD.
        :rtype: int
        """
        return self._max_loss

    @max_loss.setter
    def max_loss(self, max_loss):
        """Sets the max_loss of this MtsSessionInfoQosD.

        tolerable packet loss rate in [1/10^x]  # noqa: E501

        :param max_loss: The max_loss of this MtsSessionInfoQosD.
        :type max_loss: int
        """

        self._max_loss = max_loss

    @property
    def min_tpt(self):
        """Gets the min_tpt of this MtsSessionInfoQosD.

        minimal throughput in [kbps]  # noqa: E501

        :return: The min_tpt of this MtsSessionInfoQosD.
        :rtype: int
        """
        return self._min_tpt

    @min_tpt.setter
    def min_tpt(self, min_tpt):
        """Sets the min_tpt of this MtsSessionInfoQosD.

        minimal throughput in [kbps]  # noqa: E501

        :param min_tpt: The min_tpt of this MtsSessionInfoQosD.
        :type min_tpt: int
        """

        self._min_tpt = min_tpt

    @property
    def priority(self):
        """Gets the priority of this MtsSessionInfoQosD.

        numeric value (0 - 255) corresponding to the traffic priority 0: low; 1: medium; 2: high; 3: critical  # noqa: E501

        :return: The priority of this MtsSessionInfoQosD.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this MtsSessionInfoQosD.

        numeric value (0 - 255) corresponding to the traffic priority 0: low; 1: medium; 2: high; 3: critical  # noqa: E501

        :param priority: The priority of this MtsSessionInfoQosD.
        :type priority: int
        """

        self._priority = priority
